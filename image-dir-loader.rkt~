#lang racket
(define (local-bitmap s)
  (bitmap (~a (path->string images) "/" s)))

(require (for-syntax racket))
(define-syntax (def-icon stx)
  (define name (syntax->datum
                (second (syntax->list stx))))
  (define png (~a name ".png"))
  (datum->syntax stx
                 `(begin
                    (provide ,name)
                    (define ,name (scale
                                   (local-bitmap ,png)
                                   0.1)))))



(define-syntax (def-icons stx)
  
  (define dir (syntax->datum
               (second (syntax->list stx))))

  (define ps (explode-path
             (string->path (~a (syntax-source stx)))))

  (define p (apply build-path (take ps (sub1 (length ps)))))
 
  (define (strip-png s)
    (list 'def-icon
          (string->symbol
           (string-replace s ".png" ""))))
  
  (datum->syntax stx
   `(begin
      ,@(map strip-png
             (map path->string
                  (directory-list (build-path p dir)))))))